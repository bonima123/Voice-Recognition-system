from keras.models import Model, Sequential
from keras import layers
import keras.backend as K

def build_siamese_net(encoder, input_shape,  distance_metric='uniform_euclidean'):
    assert distance_metric in ('uniform_euclidean', 'weighted_euclidean','uniform_l1', 'weighted_l1','dot_product', 'cosine_distance')

    input_1 = layers.Input(input_shape)
    input_2 = layers.Input(input_shape)

    encoded_1 = encoder(input_1)
    encoded_2 = encoder(input_2)

    if distance_metric == 'weighted_l1':
        embedded_distance = layers.Subtract()([encoded_1, encoded_2])
        embedded_distance = layers.Lambda(lambda x: K.abs(x))(embedded_distance)
        output = layers.Dense(1, activation='sigmoid')(embedded_distance)
        
    elif distance_metric == 'uniform_euclidean':
        embedded_distance = layers.Subtract(name='subtract_embeddings')([encoded_1, encoded_2])
        embedded_distance = layers.Lambda(lambda x: K.sqrt(K.sum(K.square(x), axis=-1, keepdims=True)), name='euclidean_distance')(embedded_distance)
        output = layers.Dense(1, activation='sigmoid')(embedded_distance)
        
    elif distance_metric == 'cosine_distance':
        raise NotImplementedError
   
    else:
        raise NotImplementedError

    siamese = Model(inputs=[input_1, input_2], outputs=output)

    return siamese
